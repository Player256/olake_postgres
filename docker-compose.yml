version: "3.8"

volumes:
  pgdata:
  minio-data:
  catalog-data:
  olake-config-data:

networks:
  net:
    driver: bridge

services:
  # ----- PostgreSQL -----
  postgresql:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: olake
      POSTGRES_PASSWORD: olake
      POSTGRES_DB: olakedb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U olake -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----- MinIO (S3) -----
  minio:
    image: minio/minio
    container_name: minio
    command: server --address ":9090" --console-address ":9091" /data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    ports:
      - "9090:9090"   # S3 API
      - "9091:9091"   # Console UI
    volumes:
      - minio-data:/data
    networks:
      - net

  # ----- Prepare Minio bucket -----
  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until mc alias set minio http://minio:9090 minio minio123; do sleep 1; done;
      mc mb -p minio/warehouse || true;
      mc anonymous set public minio/warehouse;
      echo 'MinIO bucket ready';
      "
    networks:
      - net

  # ----- OLake REST Catalog (Iceberg) -----
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9090
    ports:
      - "8181:8181"
    volumes:
      - catalog-data:/catalog
    depends_on:
      postgresql:
        condition: service_healthy
      mc:
        condition: service_completed_successfully
    networks:
      - net

  # ----- Spark for Iceberg SQL (optional, but demoable) -----
  spark:
    image: tabulario/spark-iceberg:latest
    container_name: spark
    ports:
      - "4040:4040"
    networks:
      - net
    depends_on:
      - rest
    entrypoint: ["/bin/sh", "-c", "tail -f /dev/null"] # keeps container running for spark-shell CLI if you want

